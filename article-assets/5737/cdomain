#!/usr/bin/env bash
# Verify bash version requirement met
case "${BASH_VERSION}" in ''|[123].*) printf 'Bash 4.0+ required.\n' >&2; exit 1; ;; esac

# Verify user has root access
((EUID == 0)) || { printf 'Run as root.\n' >&2; exit 1; }

# Function to generate nginx configuration for https
# It will redirect all http requests to https and set security headers
config_https(){
	cat > "/etc/nginx/sites-available/${domain}" <<-EOF
		server {
		    listen 80;
		    listen [::]:80;
		    ${wwwdom}
		    server_name ${domain};
		    root /var/www/${domain};
		    location / {
		        return 301 https://${domain}\$request_uri;
		    }
		}
		server {
		    listen 443 ssl http2;
		    listen [::]:443 ssl http2;
		    ssl_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
		    ssl_certificate_key /etc/letsencrypt/live/${domain}/privkey.pem;
		    ssl_trusted_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
		    root /var/www/${domain};
		    index index.php index.html index.htm index.nginx-debian.html;
		    add_header X-XSS-Protection "1; mode=block";
		    add_header Content-Security-Policy "default-src 'self'; script-src 'self';";
		    add_header Referrer-Policy "no-referrer";
		    add_header X-Frame-Options "SAMEORIGIN" always;
		    location ~ \.php$ {
		        include snippets/fastcgi-php.conf;
		        fastcgi_pass unix:/run/php/php7.4-fpm.sock;
		    }
		    ${wwwdom}
		    server_name ${domain};
		    access_log /var/log/${domain}.log;
		    error_log /var/log/${domain}.error.log;
		}
	EOF
}

# Function to generate the default nginx file for certbot
config_default(){
	cat > "/etc/nginx/sites-available/${domain}" <<-EOF
		server {
		    listen 80;
		    listen [::]:80;
		    ${wwwdom}
		    server_name ${domain};
		    root /var/www/${domain};
		    location / {
		        index index.html;
		    }
		}
	EOF
}

# Help function
helpuser(){
	cat <<-EOF
		Usage: ./${0##*/} [options]
	    -d    The domain you want to add/configure (required)
	    -a    Your vultr.com API key (required)
	    -ip   The server's IP address (optional)
	    -s    Skip adding the domain to vultr.com and just obtain certificates (optional)
	    -sub  Specify the domain is a subdomain. (required if true)
	    -f    Force add domain even if its IP does not match servers (optional)
	EOF
	exit 1
}

# Set defaults
declare -ar DEPENDS=(certbot jq curl openssl nginx dig tee)
declare -r isip='^[0-9.]+$'
declare useapi=true
declare issub=false
declare verifydomain=true
declare domain
declare domainip
declare wwwdom
declare certdom
declare apikey
declare ipaddr

# Verify the dependencies are met
hash -- "${DEPENDS[@]}" || {
	printf '\nThere are unmet dependencies.\n' >&2
	exit 1
}

# Get server's IP address and strip quotes
ipaddr=$(dig @1.1.1.1 whoami.cloudflare TXT CH +short +tries=1 +timeout=3)
ipaddr=${ipaddr//\"/}

# Get options. Alternatively you can use getopts for more advanced functionality, but it is not required
while(($# > 0)); do
	case ${1} in
		-d) shift; domain=${1?-d needs a domain} ;;
		-a) shift; apikey=${1?-a needs an API key} ;;
		-ip) shift; ipaddr=${1?-ip needs an IP address} ;;
		-s) useapi=false ;;
		-sub) issub=true ;;
		-f) verifydomain=false ;;
		*) helpuser; ;;
	esac
	shift
done

# Remove www. from the beginning of the domain in case the user set it
domain=${domain#www.}

# Verify the required variables are set
[[ -z ${domain} ]] && {
	printf 'No domain specified.\n' >&2
	exit 1
}

! ${issub} && [[ -z ${apikey} ]] && {
	printf 'No API Key specified.\n' >&2
	exit 1
}

# Use a regex test to verify the ipaddr variable is a valid IP address
[[ ${ipaddr} =~ ${isip} ]] || {
	printf 'No IP address found.\n' >&2
	exit 1
}

# Optionally add the domain to vultr.com via the v2 API
if ${useapi} && ! ${issub}; then
	curl -s -L -f -o/dev/null 'https://api.vultr.com/v2/domains' \
	-H "Authorization: Bearer ${apikey}" \
	-H 'Content-Type: application/json' \
	--data-raw "{\"domain\": \"${domain}\", \"ip\": \"${ipaddr}\"}" || {
		printf 'Could not create domain %q at vultr. Check the API key is correct and the servers IP is whitelisted before continuing.\n' "${domain}" >&2
		exit 1
	}

	printf '\n%q added successfully\n' "${domain}"
fi

# Verify the domain IP and server IP are equal. Certbot will fail if they are not.
if ${verifydomain}; then
	printf 'Verifying domain IP matches server IP. Can take up to 90 seconds.\n'

	for((i=0; i<30; i++)); do
		domainip=$(dig @1.1.1.1 "${domain}" +short +tries=1 +timeout=3)
		[[ ${ipaddr} == "${domainip}" ]] && break
		sleep 1
	done

	[[ ${ipaddr} == "${domainip}" ]] || {
		printf 'Domain IP does not match server IP. If you believe this message to be in error, rerun with -f.\n' >&2
		exit 1
	}
	printf '\nDomain and server IP match. Continuing.\n'
fi

# Make the default web directory and test it is writable, and is actually a directory
mkdir -p "/var/www/${domain}"
[[ -d "/var/www/${domain}" && -w "/var/www/${domain}" ]] || {
	printf 'Cannot write into %q.\n' "/var/www/${domain}" >&2
	exit 1
}

# If not a subdomain, add the www subdomain for the nginx configs and certbot
${issub} || wwwdom="server_name www.${domain};"
${issub} && certdom="${domain}" || certdom="${domain},www.${domain}"

# Generate the default configuration file for certbot and nginx
config_default || {
	printf 'There was a problem creating the default nginx config.\n' >&2
	exit 1
}

# Restart nginx
systemctl restart nginx.service || {
	printf 'Could not restart nginx.\n' >&2
	exit 1
}

# Test that certbot can obtain a certificate correctly
certbot certonly --dry-run --nginx -d "${certdom}" || {
	printf '\nThe certbot dryrun failed with status %q for %q. Wait a minute and try again while ensuring settings are correct.\n' "$?" "${domain}" >&2
	exit 1
}

# Delay as to not be rate-limited by letsencrypt
sleep 5

# Obtain the letsencrypt certificate
certbot certonly --nginx -d "${certdom}" || {
	printf '\nThe certbot dryrun was successful, but failed when attempting to get a certificate. Wait a minute and try again while ensuring settings are correct.\n' >&2
	exit 1
}

# Configure nginx to work with the newly obtained letsencrypt certificate
config_https || {
	printf 'There was a problem creating the https nginx config.\n' >&2
	exit 1
}

# Link the nginx config to the enabled sites directory
ln -s "/etc/nginx/sites-available/${domain}" "/etc/nginx/sites-enabled/" || {
	printf 'Could not symbolically link %q to sites-enabled.\n' "${domain}" >&2
	exit 1
}

# Restart nginx
systemctl restart nginx.service || {
	printf 'Could not restart nginx.\n' >&2
	exit 1
}

# End message
cat <<-EOF
	Everything ran successfully
	Your nginx config file is at /etc/nginx/sites-available/${domain}
	Don't forget to set the correct directory permissions for /var/www/${domain}
EOF
exit 0
